[{"D:\\Web\\Polina\\blog\\src\\index.js":"1","D:\\Web\\Polina\\blog\\src\\components\\App\\App.jsx":"2","D:\\Web\\Polina\\blog\\src\\components\\ArticlesList\\ArticlesList.jsx":"3","D:\\Web\\Polina\\blog\\src\\components\\Article\\Article.jsx":"4","D:\\Web\\Polina\\blog\\src\\services\\ArticlesService.js":"5","D:\\Web\\Polina\\blog\\src\\containers\\ArticlesListContainer\\ArticlesListContainer.jsx":"6","D:\\Web\\Polina\\blog\\src\\containers\\ArticlePage\\ArticlePage.jsx":"7","D:\\Web\\Polina\\blog\\src\\components\\Header\\Header.jsx":"8","D:\\Web\\Polina\\blog\\src\\components\\SignIn\\SignIn.jsx":"9","D:\\Web\\Polina\\blog\\src\\components\\SignUp\\SignUp.jsx":"10","D:\\Web\\Polina\\blog\\src\\components\\LoggedInUser\\LoggedInUser.jsx":"11","D:\\Web\\Polina\\blog\\src\\components\\UserInfo\\UserInfo.jsx":"12","D:\\Web\\Polina\\blog\\src\\components\\LoggedOutUser\\LoggedOutUser.jsx":"13","D:\\Web\\Polina\\blog\\src\\components\\EditProfile\\EditProfile.jsx":"14","D:\\Web\\Polina\\blog\\src\\components\\FormInput\\FormInput.jsx":"15","D:\\Web\\Polina\\blog\\src\\components\\ErrorIndicator\\ErrorIndicator.jsx":"16","D:\\Web\\Polina\\blog\\src\\store.js":"17","D:\\Web\\Polina\\blog\\src\\reducers\\rootReducer.js":"18","D:\\Web\\Polina\\blog\\src\\reducers\\setUserReducer.js":"19","D:\\Web\\Polina\\blog\\src\\actions\\actions.js":"20","D:\\Web\\Polina\\blog\\src\\components\\NewArticle\\NewArticle.jsx":"21","D:\\Web\\Polina\\blog\\src\\components\\NewArticleForm\\NewArticleForm.jsx":"22","D:\\Web\\Polina\\blog\\src\\components\\TagList\\TagList.jsx":"23","D:\\Web\\Polina\\blog\\src\\components\\TagForm\\TagForm.jsx":"24","D:\\Web\\Polina\\blog\\src\\components\\PrivateRoute\\PrivateRoute.jsx":"25","D:\\Web\\Polina\\blog\\src\\components\\EditArticle\\EditArticle.jsx":"26","D:\\Web\\Polina\\blog\\src\\utils\\addTagDeleteTag.js":"27","D:\\Web\\Polina\\blog\\src\\containers\\ArticleWrapper\\ArticleWrapper.jsx":"28"},{"size":303,"mtime":1612274017845,"results":"29","hashOfConfig":"30"},{"size":1526,"mtime":1613110223317,"results":"31","hashOfConfig":"30"},{"size":541,"mtime":1613383786323,"results":"32","hashOfConfig":"30"},{"size":4264,"mtime":1613383797642,"results":"33","hashOfConfig":"30"},{"size":3620,"mtime":1613383741779,"results":"34","hashOfConfig":"30"},{"size":1754,"mtime":1613380863779,"results":"35","hashOfConfig":"30"},{"size":1221,"mtime":1613383769657,"results":"36","hashOfConfig":"30"},{"size":1382,"mtime":1612765955726,"results":"37","hashOfConfig":"30"},{"size":3109,"mtime":1612524185481,"results":"38","hashOfConfig":"30"},{"size":4659,"mtime":1612765955874,"results":"39","hashOfConfig":"30"},{"size":1287,"mtime":1612765955765,"results":"40","hashOfConfig":"30"},{"size":847,"mtime":1612525807463,"results":"41","hashOfConfig":"30"},{"size":412,"mtime":1611846320572,"results":"42","hashOfConfig":"30"},{"size":3748,"mtime":1612765955639,"results":"43","hashOfConfig":"30"},{"size":949,"mtime":1612430666627,"results":"44","hashOfConfig":"30"},{"size":408,"mtime":1612418966635,"results":"45","hashOfConfig":"30"},{"size":311,"mtime":1612274017941,"results":"46","hashOfConfig":"30"},{"size":188,"mtime":1612274017881,"results":"47","hashOfConfig":"30"},{"size":284,"mtime":1612511052134,"results":"48","hashOfConfig":"30"},{"size":109,"mtime":1612274017370,"results":"49","hashOfConfig":"30"},{"size":1346,"mtime":1613051541035,"results":"50","hashOfConfig":"30"},{"size":1992,"mtime":1613052543628,"results":"51","hashOfConfig":"30"},{"size":845,"mtime":1613052543813,"results":"52","hashOfConfig":"30"},{"size":1011,"mtime":1613026105629,"results":"53","hashOfConfig":"30"},{"size":429,"mtime":1612879667245,"results":"54","hashOfConfig":"30"},{"size":2310,"mtime":1613052543397,"results":"55","hashOfConfig":"30"},{"size":255,"mtime":1613052543971,"results":"56","hashOfConfig":"30"},{"size":1695,"mtime":1613384456101,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1n7pgu5",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Web\\Polina\\blog\\src\\index.js",[],["122","123","124","125","126"],"D:\\Web\\Polina\\blog\\src\\components\\App\\App.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\ArticlesList\\ArticlesList.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\Article\\Article.jsx",["127"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Popconfirm } from 'antd';\nimport { HeartOutlined, HeartFilled } from '@ant-design/icons';\nimport ReactMarkdown from 'react-markdown';\nimport { format, parseISO } from 'date-fns';\nimport ArticlesService from '../../services/ArticlesService';\nimport classes from './Article.module.scss';\n\nconst Article = ({ article, isFull = false, user = {}, onLike, onDislike, isFavorite }) => {\n  const history = useHistory();\n  const articleService = new ArticlesService();\n  const { username: currentUser } = user;\n  if (article) {\n    const {\n      title,\n      slug,\n      body,\n      createdAt,\n      tagList,\n      description,\n      author: { username, image },\n      favoritesCount,\n    } = article;\n\n    const date = format(new Date(parseISO(createdAt)), 'MMMM d, yyyy');\n\n    const onDelete = () => {\n      articleService\n        .deleteArticle(slug)\n        .then(() => history.push('/'))\n        .catch((err) => console.log(err));\n    };\n\n    return (\n      <article className={classes.Article}>\n        <header className={classes.Article__Header}>\n          <div className={classes.Article__Left}>\n            <div className={classes.Article__TitleWrapper}>\n              <h2 className={classes.Article__Title}>\n                <Link className={classes.Article__Link} to={`/articles/${slug}`}>\n                  {title}\n                </Link>\n              </h2>\n              {isFavorite ? (\n                <HeartFilled\n                  onClick={onDislike}\n                  className={classes.Article__Heart}\n                  style={{ fontSize: '18px', color: '#ff0707' }}\n                />\n              ) : (\n                <HeartOutlined onClick={onLike} className={classes.Article__Heart} style={{ fontSize: '18px' }} />\n              )}\n              <span className={classes.Article__Like}>{favoritesCount}</span>\n            </div>\n            <ul className={classes.Article__Tags}>\n              {tagList.map((tag) => (\n                <li key={Math.random()} className={classes.Article__TagsItem}>\n                  {tag}\n                </li>\n              ))}\n            </ul>\n            <p className={classes.Article__Description}>{description}</p>\n          </div>\n          <div className={classes.Article__Right}>\n            <div className={classes.Article__UserInfoWrapper}>\n              <div className={classes.Article__UserInfo}>\n                <span className={classes.Article__Username}>{username}</span>\n                <span>{date}</span>\n              </div>\n              <img className={classes.Article__Avatar} src={image} width=\"46\" height=\"46\" alt=\"Avatar\" />\n            </div>\n            {isFull && username === currentUser ? (\n              <div className={classes.Article__Buttons}>\n                <Popconfirm\n                  placement=\"rightTop\"\n                  title=\"Are you sure to delete this article?\"\n                  onConfirm={onDelete}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <Button className={classes.Article__Delete} type=\"danger\">\n                    Delete\n                  </Button>\n                </Popconfirm>\n                <Button\n                  className={classes.Article__Edit}\n                  type=\"primary\"\n                  onClick={() => history.push(`/articles/${slug}/edit`)}\n                >\n                  Edit\n                </Button>\n              </div>\n            ) : null}\n          </div>\n        </header>\n        <section className={classes.Article__Body}>{isFull ? <ReactMarkdown source={body} /> : null}</section>\n      </article>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = ({ userData: { user } }) => ({ user });\nexport default connect(mapStateToProps)(Article);\n\nArticle.defaultProps = {\n  user: {},\n  article: {},\n  isFull: false,\n  onLike: () => {},\n  onDislike: () => {},\n  isFavorite: '',\n};\n\nArticle.propTypes = {\n  user: PropTypes.instanceOf(Object),\n  article: PropTypes.instanceOf(Object),\n  isFull: PropTypes.bool,\n  onLike: PropTypes.func,\n  onDislike: PropTypes.func,\n  isFavorite: PropTypes.string,\n};\n","D:\\Web\\Polina\\blog\\src\\services\\ArticlesService.js",[],"D:\\Web\\Polina\\blog\\src\\containers\\ArticlesListContainer\\ArticlesListContainer.jsx",[],"D:\\Web\\Polina\\blog\\src\\containers\\ArticlePage\\ArticlePage.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\Header\\Header.jsx",["128"],"import React, { useEffect, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport LoggedInUser from '../LoggedInUser/LoggedInUser';\nimport LoggedOutUser from '../LoggedOutUser/LoggedOutUser';\nimport ArticlesService from '../../services/ArticlesService';\nimport { setUser } from '../../actions/actions';\nimport classes from './Header.module.scss';\n\nconst Header = (props) => {\n  const articlesService = useMemo(() => new ArticlesService(), []);\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      articlesService\n        .getCurrentUser()\n        .then((body) => {\n          props.setUser(body.user);\n        })\n        .catch((err) => console.log(err));\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <header className={classes.Header}>\n      <h1 className={classes.Header__Title}>\n        <Link className={classes.Header__TitleLink} to=\"/\">\n          Realword Blog\n        </Link>\n      </h1>\n      {localStorage.getItem('token') ? <LoggedInUser /> : <LoggedOutUser />}\n    </header>\n  );\n};\nconst mapStateToProps = ({ userData: { user } }) => ({ user });\nconst mapDispatchToProps = { setUser };\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\nHeader.propTypes = {\n  setUser: PropTypes.func.isRequired,\n};\n","D:\\Web\\Polina\\blog\\src\\components\\SignIn\\SignIn.jsx",["129"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd';\nimport isEmail from 'validator/es/lib/isEmail';\nimport FormInput from '../FormInput/FormInput';\nimport ArticlesService from '../../services/ArticlesService';\nimport { setUser } from '../../actions/actions';\nimport classes from './SignIn.module.scss';\nimport ErrorIndicator from '../ErrorIndicator/ErrorIndicator';\n\nconst SignIn = (props) => {\n  const [serverErrors, setServerErrors] = useState({\n    'email or password': null,\n  });\n\n  const articlesService = new ArticlesService();\n  const { register, handleSubmit, watch, errors } = useForm({\n    mode: 'onChange',\n  });\n\n  const onSubmit = ({ email, password }) => {\n    const requestBody = {\n      user: {\n        email,\n        password,\n      },\n    };\n    articlesService\n      .logInUser(requestBody)\n      .then((body) => {\n        if (body.errors) {\n          setServerErrors(body.errors);\n          return;\n        }\n        localStorage.setItem('token', body.user.token);\n        props.setUser(body.user);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  if (localStorage.getItem('token')) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const emailSettingsValidation = register({\n    required: 'Email is required',\n    validate: () => isEmail(watch('email')) || 'Invalid email format',\n  });\n\n  const passwordSettingsValidation = register({\n    required: 'Password is required',\n    minLength: { value: 8, message: 'Your password needs to be at least 8 characters.' },\n    maxLength: { value: 40, message: 'Your password needs to be no more than 40 characters long.' },\n  });\n\n  return (\n    <div className={classes.SignIn}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <h1 className={classes.SignIn__Title}>Sign In</h1>\n        <FormInput\n          ref={emailSettingsValidation}\n          id=\"email\"\n          error={errors.email}\n          label=\"Email Address\"\n          type=\"email\"\n          name=\"email\"\n          serverErrors={serverErrors}\n        />\n\n        <FormInput\n          ref={passwordSettingsValidation}\n          id=\"password\"\n          error={errors.password}\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          serverErrors={serverErrors}\n        />\n        {serverErrors['email or password'] && (\n          <ErrorIndicator errorMessage={`Email or password ${serverErrors['email or password']}`} />\n        )}\n        <Button className={classes.SignIn__Submit} type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n      </form>\n\n      <p className={classes.SignIn__Question}>\n        Don&apos;t you have an account? <Link to=\"/sign-up\">Sign Up.</Link>\n      </p>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ userData: { user } }) => ({ user });\nconst mapDispatchToProps = { setUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n\nSignIn.propTypes = {\n  setUser: PropTypes.func.isRequired,\n};\n","D:\\Web\\Polina\\blog\\src\\components\\SignUp\\SignUp.jsx",["130"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Button } from 'antd';\nimport isEmail from 'validator/es/lib/isEmail';\nimport FormInput from '../FormInput/FormInput';\nimport ArticlesService from '../../services/ArticlesService';\nimport { setUser } from '../../actions/actions';\nimport classes from './SignUp.module.scss';\n\nconst SignUp = (props) => {\n  const articlesService = new ArticlesService();\n  const [serverErrors, setServerErrors] = useState({\n    username: null,\n    email: null,\n    password: null,\n  });\n  const { register, handleSubmit, watch, errors } = useForm({\n    mode: 'onChange',\n  });\n\n  const onSubmit = ({ username, email, password }) => {\n    const requestBody = {\n      user: {\n        username,\n        email,\n        password,\n      },\n    };\n\n    articlesService\n      .registerUser(requestBody)\n      .then((body) => {\n        if (body.errors) {\n          setServerErrors(body.errors);\n          return;\n        }\n        localStorage.setItem('token', body.user.token);\n        props.setUser(body.user);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  if (localStorage.getItem('token')) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const passwordValue = watch('password', '');\n\n  const usernameSettingsValidation = register({\n    required: 'Username is required',\n    minLength: { value: 3, message: 'Your username needs to be at least 3 characters.' },\n    maxLength: { value: 20, message: 'Your username needs to be no more than 20 characters long.' },\n  });\n\n  const emailSettingsValidation = register({\n    required: 'Email is required',\n    validate: () => isEmail(watch('email')) || 'Invalid email format',\n  });\n\n  const passwordSettingsValidation = register({\n    required: 'Password is required',\n    minLength: { value: 8, message: 'Your password needs to be at least 8 characters.' },\n    maxLength: { value: 40, message: 'Your password needs to be no more than 40 characters long.' },\n  });\n\n  const passwordRepeatSettingsValidation = register({\n    required: 'Password is required',\n    validate: (value) => value === passwordValue || 'Passwords must match',\n  });\n\n  const agreementSettingsValidation = register({\n    required: 'Please accept the terms and conditions to continue',\n  });\n\n  return (\n    <div className={classes.SignUp}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <h1 className={classes.SignUp__Title}>Create new account</h1>\n\n        <FormInput\n          ref={usernameSettingsValidation}\n          id=\"username\"\n          error={errors.username}\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          serverErrors={serverErrors}\n        />\n\n        <FormInput\n          ref={emailSettingsValidation}\n          id=\"email\"\n          error={errors.email}\n          label=\"Email Address\"\n          type=\"email\"\n          name=\"email\"\n          serverErrors={serverErrors}\n        />\n\n        <FormInput\n          ref={passwordSettingsValidation}\n          id=\"password\"\n          error={errors.password}\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          serverErrors={serverErrors}\n        />\n\n        <FormInput\n          ref={passwordRepeatSettingsValidation}\n          id=\"passwordRepeat\"\n          error={errors.passwordRepeat}\n          label=\"Repeat Password\"\n          type=\"password\"\n          name=\"passwordRepeat\"\n          serverErrors={serverErrors}\n        />\n\n        <div className={classes.SignUp__Agreement}>\n          <label htmlFor=\"checkbox\" className={classes.SignUp__Label}>\n            <input\n              className={classes.SignUp__Checkbox}\n              id=\"checkbox\"\n              name=\"checkbox\"\n              type=\"checkbox\"\n              ref={agreementSettingsValidation}\n            />\n            I agree to the processing of my personal information\n          </label>\n          {errors.checkbox && <p style={{ margin: 0, color: '#f5222d' }}>{errors.checkbox.message}</p>}\n        </div>\n\n        <Button className={classes.SignUp__Submit} type=\"primary\" htmlType=\"submit\">\n          Create\n        </Button>\n        <p className={classes.SignUp__Question}>\n          Already have an account? <Link to=\"/sign-in\">Sign In.</Link>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ userData: { user } }) => ({ user });\nconst mapDispatchToProps = { setUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n\nSignUp.propTypes = {\n  setUser: PropTypes.func.isRequired,\n};\n","D:\\Web\\Polina\\blog\\src\\components\\LoggedInUser\\LoggedInUser.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\UserInfo\\UserInfo.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\LoggedOutUser\\LoggedOutUser.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\EditProfile\\EditProfile.jsx",["131"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Button } from 'antd';\nimport isEmail from 'validator/es/lib/isEmail';\nimport isURL from 'validator/es/lib/isURL';\nimport ArticlesService from '../../services/ArticlesService';\nimport { setUser } from '../../actions/actions';\nimport FormInput from '../FormInput/FormInput';\nimport DefaultUserAvatar from '../../img/DefaultUserAvatar.svg';\nimport classes from './EditProfile.module.scss';\n\nconst EditProfile = (props) => {\n  const articlesService = new ArticlesService();\n  const history = useHistory();\n  const { register, handleSubmit, watch, errors, setValue } = useForm({\n    mode: 'onChange',\n  });\n\n  useEffect(() => {\n    const { user } = props;\n    if (user) {\n      setValue('username', `${user.username}`);\n      setValue('email', `${user.email}`);\n      setValue('image', `${user.image ?? DefaultUserAvatar}`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  const onSubmit = ({ username, email, password, image }) => {\n    const requestBody = {\n      user: { username, email, password, image },\n    };\n    articlesService\n      .updateUser(requestBody)\n      .then(({ user }) => {\n        props.setUser(user);\n        history.push('/');\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const usernameSettingsValidation = register({\n    required: 'Username is required',\n    minLength: { value: 3, message: 'Your username needs to be at least 3 characters.' },\n    maxLength: { value: 20, message: 'Your username needs to be no more than 20 characters long.' },\n  });\n\n  const emailSettingsValidation = register({\n    required: 'Email is required',\n    validate: () => isEmail(watch('email')) || 'Invalid email format',\n  });\n\n  const passwordSettingsValidation = register({\n    minLength: { value: 8, message: 'Your password needs to be at least 8 characters.' },\n    maxLength: { value: 40, message: 'Your password needs to be no more than 40 characters long.' },\n  });\n\n  const urlSettingsValidation = register({\n    required: false,\n    validate: () => isURL(watch('image')) || 'Invalid url format',\n  });\n\n  return (\n    <div className={classes.Profile}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <h1 className={classes.Profile__Title}>Edit profile</h1>\n        <FormInput\n          ref={usernameSettingsValidation}\n          id=\"username\"\n          error={errors.username}\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n        />\n        <FormInput\n          ref={emailSettingsValidation}\n          id=\"email\"\n          error={errors.email}\n          label=\"Email Address\"\n          type=\"email\"\n          name=\"email\"\n        />\n        <FormInput\n          ref={passwordSettingsValidation}\n          id=\"newPassword\"\n          error={errors.newPassword}\n          label=\"New Password\"\n          type=\"password\"\n          name=\"newPassword\"\n        />\n        <FormInput\n          ref={urlSettingsValidation}\n          id=\"image\"\n          error={errors.image}\n          label=\"Avatar Image\"\n          type=\"url\"\n          name=\"image\"\n        />\n        <Button className={classes.Profile__Submit} type=\"primary\" htmlType=\"submit\">\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ userData: { user } }) => ({ user });\nconst mapDispatchToProps = { setUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfile);\nEditProfile.defaultProps = {\n  user: {},\n};\n\nEditProfile.propTypes = {\n  user: PropTypes.instanceOf(Object),\n  setUser: PropTypes.func.isRequired,\n};\n","D:\\Web\\Polina\\blog\\src\\components\\FormInput\\FormInput.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\ErrorIndicator\\ErrorIndicator.jsx",[],"D:\\Web\\Polina\\blog\\src\\store.js",[],"D:\\Web\\Polina\\blog\\src\\reducers\\rootReducer.js",[],"D:\\Web\\Polina\\blog\\src\\reducers\\setUserReducer.js",[],"D:\\Web\\Polina\\blog\\src\\actions\\actions.js",[],"D:\\Web\\Polina\\blog\\src\\components\\NewArticle\\NewArticle.jsx",["132"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport NewArticleForm from '../NewArticleForm/NewArticleForm';\nimport TagForm from '../TagForm/TagForm';\nimport TagList from '../TagList/TagList';\nimport ArticlesService from '../../services/ArticlesService';\nimport classes from './NewArticle.module.scss';\nimport { addTag, deleteTag } from '../../utils/addTagDeleteTag';\n\nconst NewArticle = () => {\n  const articlesService = new ArticlesService();\n  const history = useHistory();\n  const [tags, setTags] = useState([]);\n\n  const submitArticle = ({ title, description, body }) => {\n    const tagList = tags.map((tag) => tag.name);\n    const requestBody = {\n      article: {\n        title,\n        description,\n        body,\n        tagList,\n      },\n    };\n\n    articlesService\n      .createArticle(requestBody)\n      .then(({ article: { slug } }) => history.push(`/articles/${slug}`))\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <div className={classes.NewArticle}>\n      <h2 className={classes.NewArticle__Title}>Create new article</h2>\n      <NewArticleForm onSubmitArticle={submitArticle} />\n      <TagList tags={tags} onDeleteTag={(tag) => deleteTag(tags, tag, setTags)} />\n      <TagForm onAddTag={(tag) => addTag(tags, tag, setTags)} />\n    </div>\n  );\n};\nexport default NewArticle;\n","D:\\Web\\Polina\\blog\\src\\components\\NewArticleForm\\NewArticleForm.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\TagList\\TagList.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\TagForm\\TagForm.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\PrivateRoute\\PrivateRoute.jsx",[],"D:\\Web\\Polina\\blog\\src\\components\\EditArticle\\EditArticle.jsx",["133"],"import { Alert, Spin } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport ArticlesService from '../../services/ArticlesService';\nimport TagForm from '../TagForm/TagForm';\nimport NewArticleForm from '../NewArticleForm/NewArticleForm';\nimport TagList from '../TagList/TagList';\nimport { addTag, deleteTag } from '../../utils/addTagDeleteTag';\nimport classes from '../NewArticle/NewArticle.module.scss';\nimport cls from './EditArticle.module.scss';\n\nconst EditArticle = () => {\n  const [item, setArticle] = useState(null);\n  const [hasError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [tags, setTags] = useState([]);\n  const articlesService = new ArticlesService();\n  const history = useHistory();\n  const { slug } = useParams();\n\n  useEffect(() => {\n    articlesService\n      .getArticle(slug)\n      .then(({ article }) => {\n        setLoading(false);\n        setArticle(article);\n        setTags(article.tagList.map((tag) => ({ name: tag, id: `${tag}${Math.random()}` })));\n      })\n      .catch(() => {\n        setLoading(false);\n        setError(true);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [slug]);\n\n  const submitArticle = ({ title, description, body }) => {\n    const tagList = tags.map((tag) => tag.name);\n    const requestBody = {\n      article: {\n        title,\n        description,\n        body,\n        tagList,\n      },\n    };\n    articlesService\n      .updateArticle(requestBody, slug)\n      .then(({ article }) => {\n        history.push(`/articles/${article.slug}`);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  if (hasError) {\n    return <Alert message=\"Error\" description=\"Couldn't find the article\" type=\"error\" showIcon />;\n  }\n\n  if (isLoading) {\n    return <Spin className={cls.Spin} size=\"large\" tip=\"Loading...\" />;\n  }\n\n  return (\n    <div className={classes.NewArticle}>\n      <h2 className={classes.NewArticle__Title}>Edit Article</h2>\n      {item && <NewArticleForm onSubmitArticle={submitArticle} article={item} />}\n      <TagList tags={tags} onDeleteTag={(tag) => deleteTag(tags, tag, setTags)} />\n      <TagForm onAddTag={(tag) => addTag(tags, tag, setTags)} />\n    </div>\n  );\n};\n\nexport default EditArticle;\n","D:\\Web\\Polina\\blog\\src\\utils\\addTagDeleteTag.js",[],"D:\\Web\\Polina\\blog\\src\\containers\\ArticleWrapper\\ArticleWrapper.jsx",["134","135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":34,"column":25,"nodeType":"148","messageId":"149","endLine":34,"endColumn":36},{"ruleId":"146","severity":1,"message":"147","line":20,"column":25,"nodeType":"148","messageId":"149","endLine":20,"endColumn":36},{"ruleId":"146","severity":1,"message":"147","line":41,"column":23,"nodeType":"148","messageId":"149","endLine":41,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":43,"column":23,"nodeType":"148","messageId":"149","endLine":43,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":42,"column":23,"nodeType":"148","messageId":"149","endLine":42,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":29,"column":23,"nodeType":"148","messageId":"149","endLine":29,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":50,"column":23,"nodeType":"148","messageId":"149","endLine":50,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":23,"column":23,"nodeType":"148","messageId":"149","endLine":23,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":38,"column":23,"nodeType":"148","messageId":"149","endLine":38,"endColumn":34},"lines-around-directive",["150"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]